<launch>

  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find iiwa_ur_moveit_config)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="true"/>

  <arg name="iiwa_ns" default="iiwa" doc="The unique iiwa namespace."/>
  <arg name="use_pedestal" default="false " doc="If true, load the urdf with pedestal" />

  <!-- | Parameters for iiwa | -->
  <arg name="iiwa_model" default="iiwa7" />
  <arg name="iiwa_name" default="iiwa" />
  <arg name="hardware_interface" default="PositionJointInterface"/>

  <!-- | Parameters for ur | -->
  <arg name="ur_model" default="ur5" />
  <arg name="limited" default="true" />
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" />

  <!--
  By default, hide joint_state_publisher's GUI

  MoveIt!'s "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->
  <arg name="use_gui" default="false" />
  <arg name="use_rviz" default="true" />

  <!-- If needed, broadcast static tf for robot root -->


  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
  </node>
  <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
    <rosparam param="source_list">["move_group/fake_controller_joint_states"]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt! executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find iiwa_ur_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
    <arg name="iiwa_ns" value="$(arg iiwa_ns)" />
    <arg name="iiwa_model" value="$(arg iiwa_model)" />
    <arg name="iiwa_name" value="$(arg iiwa_name)" />
    <arg name="hardware_interface" value="$(arg hardware_interface)"/>
    <arg name="ur_model" value="$(arg ur_model)" />
    <arg name="transmission_hw_interface" value="$(arg transmission_hw_interface)" />
    <arg name="use_pedestal" value="$(arg use_pedestal)"/>
    <arg name="limited" value="$(arg limited)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find iiwa_ur_moveit_config)/launch/moveit_rviz.launch" if="$(arg use_rviz)">
    <arg name="rviz_config" value="$(find iiwa_ur_moveit_config)/launch/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find iiwa_ur_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>

</launch>
